
# curl -i $(minikube ip):32686 -H 'host: canary.test'
# curl -i $(minikube ip):32686/login -H 'host: canary.test'

# curl -i $(minikube ip):32686 -H 'host: blue-green.test'

#  Gateway API 不仅支持路由转发，它还能够轻松实现流量拆分，
#  比如常见的金丝雀部署和蓝绿部署，只需要调整 backendRefs 字段即可。
---

#ngx-canary-route 里有两条规则，默认的后端服务是 blue-svc，另一个加了匹配条件，只有访问特定的地址、使用特定的头字段才会转到后端服务 green-svc。
# curl -i $(minikube ip):32686 -H 'host: canary.test'
# curl -i $(minikube ip):32686/login -H 'host: canary.test'
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: ngx-canary-route
spec:
  parentRefs:
  - name: kong-gtw
  hostnames:
  - "canary.test"

  rules:

  # most traffic
  - backendRefs:
    - name: blue-svc
      port: 80

  # less traffic
  - matches:
    - headers:
      - name: traffic
        value: canary
    - path:
        type: Exact
        value: /login
    backendRefs:
    - name: green-svc
      port: 80

---

#ngx-blue-green-route 里也是两个后端服务，blue-svc 和 green-svc，但使用 weight 字段指定了不同的权重，这样在部署的时候就可以随意调节流量比例。
# curl -i $(minikube ip):32686 -H 'host: blue-green.test'
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: ngx-blue-green-route
spec:
  parentRefs:
  - name: kong-gtw
  hostnames:
  - "blue-green.test"
  rules:

  - backendRefs:

    # blue version
    - name: blue-svc
      port: 80
      weight: 50

    # green version
    - name: green-svc
      port: 80
      weight: 50

---


